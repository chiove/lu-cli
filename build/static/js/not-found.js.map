{"version":3,"sources":["webpack:///./src/utils/get-initial-props.js","webpack:///./src/pages/not-found/index.js"],"names":["_this","_isPop","_isMount","popStateCallback","getInitialProps","SourceComponent","props","state","initialData","canClientFetch","this","match","location","res","setState","window","__USE_SERVER__","addEventListener","history","action","__INITIAL_DATA__","ctx","React","Component","className","onClick","push"],"mappings":"y8DAIA,IAAIA,EAAQ,KACRC,GAAS,EACTC,GAAW,EACTC,EAAmB,WAEnBH,GAASA,EAAMI,kBACjBH,GAAS,EACLC,GACFF,EAAMI,oBAKG,aAAAC,GAAe,oB,kOAAA,U,MAAA,aAC5B,WAAYC,GAAO,a,4FAAA,UACjB,cAAMA,IAEDC,MAAQ,CACXC,YAAa,GACbC,gBAAgB,GALD,EADS,O,EAAA,E,EAAA,0KAmBAC,KAAKJ,MAAxBK,EAnBmB,EAmBnBA,MAAOC,EAnBY,EAmBZA,UACFP,EAAgBD,gBApBF,gCAoB0BC,EAAgBD,gBAAgB,CAACO,QAAOC,aApBlE,8CAoB+E,GApB/E,OAoBpBC,EApBoB,KAqB1BH,KAAKI,SAAS,CACZN,YAAaK,EACbJ,gBAAgB,IAvBQ,2PAmC1BP,GAAW,EACPa,OAAOC,iBACThB,EAAQU,KAERK,OAAOE,iBAAiB,WAAYd,GAChCF,GACFS,KAAKN,qBAIcM,KAAKJ,MAAMY,SAAyC,SAA9BR,KAAKJ,MAAMY,QAAQC,SACzCJ,OAAOC,eA9CJ,gCA+ClBN,KAAKN,kBA/Ca,0IAoD1BH,GAAS,EACTC,GAAW,IArDe,+BA2D1B,IAAMI,E,+VAAQ,CAAH,CACTE,YAAa,IACVE,KAAKJ,OAOH,EAEiCI,KAAKH,MAApCE,EAFF,EAEEA,eAAgBD,EAFlB,EAEkBA,YASzB,OARMC,EACFH,EAAME,YAAcA,GAAe,IAEnCF,EAAME,YAAcO,OAAOK,iBAC3BL,OAAOK,iBAAmB,MAIvB,kBAACf,EAAoBC,M,EA/EF,uEAWCe,GAXD,0FAYdhB,EAAgBD,gBAZF,gCAY0BC,EAAgBD,gBAAgBiB,GAZ1D,8CAYiE,GAZjE,cAYpBR,EAZoB,uBAanBA,GAbmB,0F,8BAAA,GAA8BS,IAAMC,a,iCCjBlE,2CAIenB,uBAAgB,SAAAE,GAAK,OAClC,yBAAKkB,UAAU,uBACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,qBAAf,QACA,yBAAKA,UAAU,kBACb,2CACA,0BACEA,UAAU,iBACVC,QAAS,WACPnB,EAAMY,QAAQQ,KAAK,WAHvB","file":"static/js/not-found.js","sourcesContent":["// 高阶组件 用于提取重复逻辑\n\nimport React from 'react';\n\nlet _this = null;\nlet _isPop = false;// 是否触发过popState\nlet _isMount = false;// 组件是否挂载完成\nconst popStateCallback = () => {\n  // 使用 popStateCallback 保存函数防止 addEventListener 重复注册\n  if (_this && _this.getInitialProps) {\n    _isPop = true;\n    if (_isMount) { // 只有当前组件挂载后才能执行数据预取，否则会报错\n      _this.getInitialProps();\n    }\n  }\n};\n\nexport default SourceComponent => class HoComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      initialData: {},\n      canClientFetch: false, // 浏览器端是否需要请求数据\n    };\n  }\n\n  // 用于服务端调用\n  static async getInitialProps(ctx) {\n    const res = SourceComponent.getInitialProps ? await SourceComponent.getInitialProps(ctx) : {};\n    return res;\n  }\n\n  // 用于封装处理\n  async getInitialProps() {\n    // ssr首次进入页面以及csr/ssr切换路由时才调用组件的getInitialProps方法\n    const {match, location} = this.props;\n    const res = SourceComponent.getInitialProps ? await SourceComponent.getInitialProps({match, location}) : {};\n    this.setState({\n      initialData: res,\n      canClientFetch: true,\n    });\n\n    // console.log('getInitialProps');\n    // let { tdk } = res.page;\n    // if (tdk) {\n    //     document.title = tdk.title;\n    // }\n  }\n\n  async componentDidMount() {\n    // 注册事件，用于在页面回退和前进的时候触发\n    _isMount = true;// 组件挂载完成\n    if (window.__USE_SERVER__) { // 只有当启用 ssr 时\n      _this = this; // 修正_this指向，保证_this指向当前渲染的页面组件\n      // 注册事件\n      window.addEventListener('popstate', popStateCallback);\n      if (_isPop) { // 如果前进或者后退 则需要异步获取数据\n        this.getInitialProps();\n      }\n    }\n\n    const canClientFetch = this.props.history && this.props.history.action === 'PUSH';// 路由跳转的时候可以异步请求数据\n    if (canClientFetch || !window.__USE_SERVER__) {\n      await this.getInitialProps();\n    }\n  }\n\n  componentWillUnmount() {\n    _isPop = false; // 重置为未触发\n    _isMount = false;// 重置为未挂载\n  }\n\n  render() {\n    // 只有在首次进入页面需要将window.__INITIAL_DATA__作为props，路由切换时不需要\n\n    const props = {\n      initialData: {},\n      ...this.props,\n    };\n\n\n    if (__SERVER__) {\n      // 服务端渲染\n      if (this.props.staticContext) props.initialData = this.props.staticContext.initialData || {};\n    } else {\n      // 客户端渲染\n      const {canClientFetch, initialData} = this.state;\n      if (canClientFetch) { // 需要异步请求数据\n        props.initialData = initialData || {};\n      } else {\n        props.initialData = window.__INITIAL_DATA__;\n        window.__INITIAL_DATA__ = null;// 使用过后清除数据,否则其他页面会使用\n      }\n    }\n\n    return <SourceComponent {...props} />;\n  }\n};\n","import React from 'react';\nimport getInitialProps from 'src/utils/get-initial-props';\nimport './index.less';\n\nexport default getInitialProps(props => (\n  <div className=\"not-found-container\">\n    <div className=\"not-found-section\">\n      <div className=\"not-found-content\">404!</div>\n      <div className=\"not-found-text\">\n        <span>你要找的页面不存在</span>\n        <span\n          className=\"not-found-href\"\n          onClick={() => {\n            props.history.push('/home');\n          }}\n        >返回首页\n        </span>\n      </div>\n    </div>\n  </div>\n));\n"],"sourceRoot":""}