{"version":3,"sources":["webpack:///./src/utils/get-initial-props.js","webpack:///./src/pages/index/index.js"],"names":["_this","_isPop","_isMount","popStateCallback","SourceComponent","initialData","canClientFetch","this","match","location","res","window","props","history","action","staticContext","React","getInitialProps","canvas","useRef","useEffect","className","ref"],"mappings":"g7DAIA,IAAIA,EAAJ,KACIC,GAAJ,EACIC,GAAJ,EACMC,EAAmB,WACnBH,GAASA,EAAb,kBACEC,KACA,GACED,sBAKS,aAAAI,GAAe,oB,kOAAA,U,MAAA,aAC5B,cAAmB,a,4FAAA,UACjB,kBAEA,MAAa,CACXC,YADW,GAEXC,gBAAgB,GALD,EADS,O,EAAA,E,EAAA,0KAmBAC,KAnBA,MAmBnBC,EAnBmB,QAmBZC,EAnBY,YAoBdL,EApBc,gDAoB0BA,EAAA,gBAAgC,CAACI,MAAD,EAAQC,aApBlE,wDAoBpBC,EApBoB,KAqB1BH,KAAA,SAAc,CACZF,YADY,EAEZC,gBAAgB,IAvBQ,2PAmC1BJ,GAnC0B,EAoCtBS,OAAJ,iBACEX,EADyB,KAGzBW,sCACA,GACEJ,KAAA,qBAImBA,KAAKK,MAAMC,SA7CR,SA6CmBN,KAAKK,MAAMC,QAAQC,SACzCH,OA9CG,+CA+ClBJ,KA/CkB,4JAoD1BN,GADqB,EAErBC,GAFqB,IAnDK,+BAyD1B,IAAMU,E,+VAAQ,CAAH,CACTP,YAAa,IACVE,KAFL,OAmBA,OAXMA,KAAKK,MAAT,gBAA8BA,cAAoBL,KAAKK,MAAMG,cAAcV,aAA7CO,IAWzB,oBAAP,M,EA5E0B,oKAYdR,EAZc,gDAY0BA,kBAZ1B,kEAYpBM,EAZoB,oH,8BAAA,GAA8BM,IAA9B,a,gCChB9B,gDAQeC,uBAAgB,WAC7B,IAAMC,EAASC,iBAAf,MAKA,OAHAC,qBAAU,cAEP,CAFHA,IAIE,6BACE,yBAAKC,UAAL,SAAwBC,IAAKJ","file":"index.js","sourcesContent":["// 高阶组件 用于提取重复逻辑\n\nimport React from 'react';\n\nlet _this = null;\nlet _isPop = false;\nlet _isMount = false;\nconst popStateCallback = () => {\n  if (_this && _this.getInitialProps) {\n    _isPop = true;\n    if (_isMount) {\n      _this.getInitialProps();\n    }\n  }\n};\n\nexport default SourceComponent => class HoComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      initialData: {},\n      canClientFetch: false,\n    };\n  }\n\n  // 用于服务端调用\n  static async getInitialProps(ctx) {\n    const res = SourceComponent.getInitialProps ? await SourceComponent.getInitialProps(ctx) : {};\n    return res;\n  }\n\n  // 用于封装处理\n  async getInitialProps() {\n    // ssr首次进入页面以及csr/ssr切换路由时才调用组件的getInitialProps方法\n    const {match, location} = this.props;\n    const res = SourceComponent.getInitialProps ? await SourceComponent.getInitialProps({match, location}) : {};\n    this.setState({\n      initialData: res,\n      canClientFetch: true,\n    });\n\n    // console.log('getInitialProps');\n    // let { tdk } = res.page;\n    // if (tdk) {\n    //     document.title = tdk.title;\n    // }\n  }\n\n  async componentDidMount() {\n    // 注册事件，用于在页面回退和前进的时候触发\n    _isMount = true;// 组件挂载完成\n    if (window.__USE_SERVER__) {\n      _this = this;\n      // 注册事件\n      window.addEventListener('popstate', popStateCallback);\n      if (_isPop) { // 如果前进或者后退 则需要异步获取数据\n        this.getInitialProps();\n      }\n    }\n\n    const canClientFetch = this.props.history && this.props.history.action === 'PUSH';\n    if (canClientFetch || !window.__USE_SERVER__) {\n      await this.getInitialProps();\n    }\n  }\n\n  componentWillUnmount() {\n    _isPop = false; // 重置为未触发\n    _isMount = false;// 重置为未挂载\n  }\n\n  render() {\n    const props = {\n      initialData: {},\n      ...this.props,\n    };\n\n\n    if (__SERVER__) {\n      // 服务端渲染\n      if (this.props.staticContext) props.initialData = this.props.staticContext.initialData || {};\n    } else {\n      // 客户端渲染\n      const {canClientFetch, initialData} = this.state;\n      if (canClientFetch) { // 需要异步请求数据\n        props.initialData = initialData || {};\n      } else {\n        props.initialData = window.__INITIAL_DATA__;\n        window.__INITIAL_DATA__ = null;\n      }\n    }\n    return <SourceComponent {...props} />;\n  }\n};\n","import React, {useState, useRef, useEffect, useCallback} from 'react';\nimport axios from 'axios';\nimport {Button} from 'antd';\nimport getInitialProps from 'src/utils/get-initial-props';\nimport './style.less';\n// const camera, scene, renderer;\n// const geometry, material, mesh;\n\nexport default getInitialProps(() => {\n  const canvas = useRef(null);\n\n  useEffect(() => {\n\n  }, [canvas]);\n  return (\n    <div>\n      <div className=\"canvas\" ref={canvas} />\n    </div>\n  );\n});\n"],"sourceRoot":""}