{"version":3,"file":"a~b~c.js","sources":["webpack:///./src/utils/getInitialProps.js"],"sourcesContent":["//高阶组件 用于提取重复逻辑\n\nimport React from 'react';\n\nlet _this = null;\nlet _isPop=false;//是否触发过popState\nlet _isMount=false;//组件是否挂载完成\nconst popStateCallback = ()=> {\n    // 使用 popStateCallback 保存函数防止 addEventListener 重复注册\n    if (_this && _this.getInitialProps) {\n        _isPop=true;\n        if(_isMount){//只有当前组件挂载后才能执行数据预取，否则会报错\n            _this.getInitialProps();\n        }\n    }\n};\n\nexport default (SourceComponent)=>{\n    return class HoComponent extends React.Component {\n        constructor(props) {\n            super(props);\n\n            this.state={\n                initialData:{},\n                canClientFetch:false//浏览器端是否需要请求数据\n            }\n        }\n        //用于服务端调用\n        static async getInitialProps(ctx){\n            return SourceComponent.getInitialProps ? await SourceComponent.getInitialProps(ctx):{};\n        }\n\n        //用于封装处理\n        async getInitialProps(){\n            // ssr首次进入页面以及csr/ssr切换路由时才调用组件的getInitialProps方法\n            const {match,location} = this.props;\n            const res =  SourceComponent.getInitialProps ? await SourceComponent.getInitialProps({match,location}) : {};\n            this.setState({\n                initialData: res,\n                canClientFetch: true\n            });\n\n            // console.log('getInitialProps');\n            // let { tdk } = res.page;\n            // if (tdk) {\n            //     document.title = tdk.title;\n            // }\n        }\n\n        async componentDidMount() {\n            //注册事件，用于在页面回退和前进的时候触发\n            _isMount=true;//组件挂载完成\n            if (window.__USE_SERVER__){//只有当启用 ssr 时\n                _this = this; // 修正_this指向，保证_this指向当前渲染的页面组件\n                //注册事件\n                window.addEventListener('popstate', popStateCallback);\n                if(_isPop){//如果前进或者后退 则需要异步获取数据\n                    this.getInitialProps();\n                }\n            }\n\n            const canClientFetch = this.props.history && this.props.history.action === 'PUSH';//路由跳转的时候可以异步请求数据\n            if (canClientFetch || !window.__USE_SERVER__) {\n                await this.getInitialProps();\n            }\n        }\n\n        componentWillUnmount(){\n            _isPop=false; //重置为未触发\n            _isMount=false;//重置为未挂载\n        }\n\n        render() {\n            // 只有在首次进入页面需要将window.__INITIAL_DATA__作为props，路由切换时不需要\n\n            const props = {\n                initialData:{},\n               ...this.props\n            };\n\n\n            if(__SERVER__){\n                //服务端渲染\n                props.initialData = this.props.staticContext.initialData || {};\n            }else{\n                //客户端渲染\n                if (this.state.canClientFetch) {//需要异步请求数据\n                    props.initialData = this.state.initialData||{};\n                } else {\n                    props.initialData = window.__INITIAL_DATA__;\n                    window.__INITIAL_DATA__ = null;//使用过后清除数据,否则其他页面会使用\n\n                }\n            }\n\n            return <SourceComponent {...props} />\n        }\n    }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAHA;AADA;AACA;AACA;AAFA;AAAA;AAcA;AAdA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAgBA;AAhBA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAkBA;AAAA;AAAA;AACA;AAnBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAkBA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA5CA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAkDA;AACA;AAAA;AACA;AApDA;AAAA;AAAA;AAuDA;AAEA;AACA;AADA;AACA;AAKA;AACA;AACA;AAFA,iBAYA;AACA;AACA;AACA;AA9EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AADA;;;;A","sourceRoot":""}